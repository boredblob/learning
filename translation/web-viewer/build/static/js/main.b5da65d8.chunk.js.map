{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["theme","createMuiTheme","palette","type","preprocess","str","w","toLowerCase","trim","normalize","replace","search","loadVocab","a","fetch","then","r","json","wi","iw","input","target","argMax","arr","length","max","maxIndex","i","App","useState","text","setText","translatedText","setTranslatedText","encoder","setEncoder","decoder","setDecoder","vocab","setVocab","translateError","setError","useEffect","tf","loadModel","ThemeProvider","className","action","onSubmit","e","preventDefault","inputs","console","log","split","push","inputTensor","result","hidden","predict","dec_hidden","dec_input","predictions","predicted_id","gather","arraySync","translate","Typography","variant","color","TextField","id","name","label","error","helperText","inputProps","autoComplete","spellCheck","defaultValue","onChange","value","Button","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5da65d8.chunk.js","sourcesContent":["import './App.css';\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { TextField, ThemeProvider, Typography, Button } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\n\r\nconst input_max_length = 65;\r\nconst target_max_length = 53;\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\"\r\n  }\r\n});\r\n\r\nfunction App() {\r\n  const [text, setText] = useState(\"\");\r\n  const [translatedText, setTranslatedText] = useState(\"\");\r\n  const [encoder, setEncoder] = useState(null);\r\n  const [decoder, setDecoder] = useState(null);\r\n  const [vocab, setVocab] = useState(null);\r\n  const [translateError, setError] = useState(false)\r\n  useEffect(() => {\r\n    async function loadModel() {\r\n      setEncoder(await tf.loadLayersModel(\"./models/encoder/model.json\"));\r\n      setDecoder(await tf.loadLayersModel(\"./models/decoder/model.json\"));\r\n      setVocab(await loadVocab());\r\n    }\r\n    loadModel();\r\n  }, []);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <form className=\"container\" action=\"\" onSubmit={e => {\r\n        e.preventDefault();\r\n        setError(false);\r\n        setTranslatedText(translate(text, encoder, decoder, vocab, setError));\r\n      }}>\r\n        <div className=\"textfield-wrapper\">\r\n          <Typography variant=\"h4\" color=\"textPrimary\">French:</Typography>\r\n          <TextField\r\n            className=\"textfield\" id=\"french\" name=\"french\" variant=\"standard\" label=\"\" \r\n            {...(translateError && {error: true, helperText: \"Unrecognised Word\"})} \r\n            inputProps={{autoComplete: \"off\", spellCheck:\"false\"}} defaultValue={\"\"}\r\n            onChange={e => {\r\n              setText(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"textfield-wrapper\">\r\n          <Typography variant=\"h4\" color=\"textPrimary\">English:</Typography>\r\n          <TextField className=\"textfield\" id=\"english\" name=\"english\" variant=\"standard\" label=\"\" inputProps={{autoComplete: \"off\", spellCheck:\"false\"}} value={translatedText}/>\r\n        </div>\r\n        <div className=\"button-wrapper\">\r\n          <Button id=\"button\" type=\"submit\" variant=\"contained\" color=\"primary\">Translate</Button>\r\n        </div>\r\n      </form>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nfunction translate(text, encoder, decoder, vocab, setError) {\r\n  if (encoder == null || decoder == null || vocab == null) return \"\";\r\n  if (text === \"\") return \"\";\r\n  let inputs = [];\r\n  console.log(preprocess(text).split(\" \"));\r\n  for (let i of preprocess(text).split(' ')) {\r\n    let w = vocab.input.wi[i];\r\n    if (w == null) {\r\n      setError(true);\r\n      return \"\";\r\n    }\r\n    inputs.push(w);\r\n  }\r\n  for (let i = inputs.length; i < input_max_length; i++) inputs.push(0);\r\n  let inputTensor = tf.tensor([inputs]);\r\n  let result = \"\";\r\n  let hidden = tf.zeros([1, 1024]);\r\n  let [, enc_hidden] = encoder.predict([inputTensor, hidden]);\r\n  let dec_hidden = enc_hidden;\r\n  let dec_input = tf.expandDims([vocab.target.wi['<start>']], 0);\r\n\r\n  for (let i = 0; i < target_max_length; i++) {\r\n    let predictions;\r\n    [predictions, dec_hidden] = decoder.predict([dec_input, dec_hidden]);\r\n    let predicted_id = argMax(predictions.gather(0).gather(0).arraySync());\r\n    if (vocab.target.iw[predicted_id] === \"<end>\") break;\r\n    result += vocab.target.iw[predicted_id] + ' ';\r\n    dec_input = tf.expandDims([predicted_id], 0);\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction preprocess(str) {\r\n  let w = str.toLowerCase().trim();\r\n  w = w.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\r\n  w = w.replace(/([?.!,¿¡])/g, \" \" + w[w.search(/([?.!,¿¡])/g)] + \" \");\r\n  w = w.replace(/[^a-zA-Z?.!,¿¡]+/g, \" \");\r\n  w = w.replace(/\\s\\s+/g, \" \");\r\n  w = w.trim();\r\n  w = \"<start> \" + w + \" <end>\";\r\n  return w;\r\n}\r\n\r\nasync function loadVocab() {\r\n  return {\r\n    input: {\r\n      wi: await fetch(\"./dicts/input_wi.json\").then(r => r.json()),\r\n      iw: await fetch(\"./dicts/input_iw.json\").then(r => r.json())\r\n    },\r\n    target: {\r\n      wi: await fetch(\"./dicts/target_wi.json\").then(r => r.json()),\r\n      iw: await fetch(\"./dicts/target_iw.json\").then(r => r.json())\r\n    }\r\n  };\r\n}\r\n\r\nfunction argMax(arr) {\r\n  if (arr.length === 0) return -1;\r\n  let max = arr[0];\r\n  let maxIndex = 0;\r\n\r\n  for (var i = 1; i < arr.length; i++) {\r\n      if (arr[i] > max) {\r\n          maxIndex = i;\r\n          max = arr[i];\r\n      }\r\n  }\r\n\r\n  return maxIndex;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}